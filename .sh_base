# Basic environment settings ----------------------------------------------{{{1
export WORK="$HOME/work"

LANG="en_US.UTF-8"

# Auto generated variables.
[[ -f ~/.sh_auto ]] && . ~/.sh_auto || true

# Custom environment settings.
[[ -f ~/.sh_env ]] && . ~/.sh_env || true

if [[ -d ~/.local/bin ]] && ! echo $PATH | grep -q "$HOME/.local/bin"; then
  PATH="$HOME/.local/bin:$PATH"
fi

# For MacOS.
if [[ $(uname) == "Darwin" ]]; then
  if [[ $_z_has_coreutils -eq 0 ]]; then
    PATH="$_z_coreutils_path/libexec/gnubin:$PATH"
    MANPATH="$_z_coreutils_path/libexec/gnuman:$MANPATH"
  fi
  PATH="$PATH:/usr/local/sbin"
fi

# Export for tmux.
export POWERLINE_ROOT=$_z_powerline_root
# Export for vim.
export GOPATH="$WORK/goz"

PATH="$PATH:$GOPATH/bin"

if [[ $_z_has_dircolors -eq 0 && -f ~/.dircolors.256dark ]]; then
  eval $(dircolors ~/.dircolors.256dark)
fi

# fzf -- General-purpose command-line fuzzy finder ------------------------{{{1
#     -- https://github.com/junegunn/fzf
#   Search syntax: https://github.com/junegunn/fzf#search-syntax
#   Useful examples: https://github.com/junegunn/fzf/wiki/examples

# Configure default layout & key bindings.
FZF_DEFAULT_OPTS="--height=99% --reverse --inline-info \
  --preview-window right:60%:wrap \
  --bind ctrl-j:down,ctrl-k:up \
  --bind ctrl-d:half-page-down,ctrl-u:half-page-up \
  --bind ctrl-f:page-down,ctrl-b:page-up \
  --bind alt-j:preview-down,alt-k:preview-up \
  --bind alt-d:preview-half-page-down,alt-u:preview-half-page-up \
  --bind alt-f:preview-page-down,alt-b:preview-page-up"

# Use fd instead of the default find command to traverse the file system.
if command -v fd >/dev/null; then
  FZF_DEFAULT_COMMAND="fd --type file --follow --hidden --exclude .git \
    --color=always"
  FZF_DEFAULT_OPTS+=" --ansi"
  FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
fi

# Configure shell key bindings --------------------------------------------{{{2
#   https://github.com/junegunn/fzf/wiki/Configuring-shell-key-bindings

# CTRL-R - Paste the selected command from history onto the command-line
#   If you want to see the commands in chronological order, press CTRL-R again
#   which toggles sorting by relevance.
# Bind ? key for toggling the preview window.
FZF_CTRL_R_OPTS="--preview 'echo {}' --preview-window down:3:hidden:wrap \
  --bind '?:toggle-preview'"

# CTRL-T - Paste the selected files and directories onto the command-line
# Preview the content of the file under the cursor.
if command -v bat >/dev/null; then
  FZF_CTRL_T_OPTS+=" --preview 'bat {} --color=always --style=numbers'"
else
  FZF_CTRL_T_OPTS+=" --preview '(cat {} || tree -C {}) 2>/dev/null'"
fi
# Automatically selects the item if only one & automatically exits if empty.
FZF_CTRL_T_OPTS+=" --select-1 --exit-0"

# ALT-C - cd into the selected directory
# Uses tree command to show the entries of the directory.
FZF_ALT_C_OPTS+=" --preview 'tree -aC {}'"
# Automatically selects the item if only one & automatically exits if empty.
FZF_ALT_C_OPTS+=" --select-1 --exit-0"

# Fuzzy completion for bash and zsh ---------------------------------------{{{2
#   https://github.com/junegunn/fzf#fuzzy-completion-for-bash-and-zsh

if command -v fd >/dev/null; then
  # Use fd instead of the default find command for listing path candidates.
  _fzf_compgen_path() {
    fd --color=always --hidden --follow --exclude ".git" . "$1"
  }
  # Use fd to generate the list for directory completion.
  _fzf_compgen_dir() {
    fd --color=always --type d --hidden --follow --exclude ".git" . "$1"
  }
  FZF_COMPLETION_OPTS+=" --ansi"
fi

# Advanced customization of fzf options via _fzf_comprun function.
_fzf_comprun() {
  local command=$1
  shift

  case "$command" in
  cd) fzf "$@" --preview 'tree -aC {}' ;;
  export | unset) fzf "$@" --preview "eval 'echo \$'{}" ;;
  ssh) fzf "$@" --preview 'dig {}' ;;
  *) fzf "$@" ;;
  esac
}

# Shell special -----------------------------------------------------------{{{1
#   NOTE: fzf settings are used by special plugins but oh-my-zsh will override
#         the CTRL-R key binding.

export FZF_DEFAULT_OPTS

# Get current shell.
SH=$(ps -p $$ -o comm=)
# Will be "-zsh" in MacOS.
SH=${SH#-}
[[ -f ~/.${SH}_local ]] && . ~/.${SH}_local || true
[[ -f ~/.fzf.${SH} ]] && . ~/.fzf.${SH} || true

# Custom commands ---------------------------------------------------------{{{1
#   Use "unalias" to cancle.

# Always keep `conf` dir under $HOME :)
alias ss="~/conf/set.sh"

# trash-cli -- Command Line Interface to FreeDesktop.org Trash
#           -- https://github.com/andreafrancia/trash-cli
#   Supported commands:
#       trash-put           trashes files and directories.
#       trash-empty         empty the trashcan(s).
#       trash-list          list trashed file.
#       trash-restore       restore a trashed file.
#       trash-rm            remove individual files from trash can.
#   Note if found segfault, check issue #52 and try to fetch pull request #53.
if command -v trash-put >/dev/null; then
  # To avoid misops, please use trash-cli or other similar tools instead.
  alias rm="echo 'This is not the command you are looking for.'; false"
  alias t="trash-put"
fi

alias v="vim"
alias vd="vimdiff"
alias vv="vim ~/conf/.vimrc"

alias tt="tree"

alias rsync="rsync -rlptvhP"

alias ms="mysql.server start"
alias mr="mysql -u root -p"

alias nb="(cd $WORK/notebook && jupyter notebook --port 9883 >/dev/null 2>&1 &)"
alias knb="pkill -f notebook"

alias spd="supervisord"
alias spc="supervisorctl"

if [[ $(uname) == "Linux" ]]; then
  alias o="xdg-open >/dev/null"
fi

if [[ $(uname) == "Darwin" ]]; then
  if [[ $_z_has_coreutils -eq 0 ]]; then
    alias ls="ls -F --show-control-chars --color=auto"
  fi
fi

# Check directory related aliases in
# $HOME/.antigen/bundles/robbyrussell/oh-my-zsh/lib/directories.zsh.
alias l="ls"
alias ll="ls -lh"
alias la="ls -A"
alias lla="ls -lhA"

alias g="git"
# Check git related aliases in
#   ./.gitconfig.
#   $HOME/.antigen/bundles/robbyrussell/oh-my-zsh/plugins/git/README.md.
alias gdh="g dh"
alias gdc="g dc"
alias gdt="g dt"
alias ga.="g a ."
alias gcx="g co --"
alias gcx.="g co -- ."
alias gcm="g ci -m"
alias gca="g ci --amend"
alias grh="g rh"
alias grh.="g rh ."
alias glf="g lfs"
alias gsh="g sh"
# Update current branch.
alias gu="(B=\$(g name-rev --name-only HEAD);gco master;gl;gco \$B;grb master)"
alias gbd="(B=\$(g name-rev --name-only HEAD);gco master;gl;g br -D \$B)"
# Always asked when pushing a new branch.
alias gps="gp -u origin \$(git symbolic-ref --short HEAD)"

alias dk="docker"

# To find more: https://kubernetes.io/docs/reference/kubectl/cheatsheet/.
alias kak="kubectl apply -k"
alias kg="kubectl get -o wide"
alias kd="kubectl describe"
alias kdf="kubectl diff -f"

# bat -- A cat clone with syntax highlighting and Git integration
#     -- https://github.com/sharkdp/bat
if command -v bat >/dev/null; then
  # https://github.com/sharkdp/bat#highlighting-theme
  export BAT_THEME="Solarized (dark)"
  # https://github.com/sharkdp/bat#man
  export MANPAGER="sh -c 'col -bx | bat -l man -p'"
fi

# ripgrep -- A regex pattern search tool respecting gitignore
#         -- https://github.com/BurntSushi/ripgrep
if command -v rg >/dev/null; then
  alias rg="rg --hidden --smart-case"
  # See https://github.com/junegunn/fzf#3-interactive-ripgrep-integration.
  rgf() {
    INITIAL_QUERY="${@}"
    RG_PREFIX="rg --line-number --color=always --hidden --smart-case"
    FZF_DEFAULT_COMMAND="$RG_PREFIX '$INITIAL_QUERY'" \
      fzf --bind "change:reload:$RG_PREFIX {q} || true" \
      --ansi --phony --query "$INITIAL_QUERY"
  }
fi

# Load auto-completion files ----------------------------------------------{{{1
export COMPLETION_DIR=${COMPLETION_DIR:-$HOME/.completion}
if [[ -d $COMPLETION_DIR ]]; then
  for f in $(find $COMPLETION_DIR -type f -name "*.$SH"); do
    . $f
  done
fi

# Work environment special ------------------------------------------------{{{1
[[ -f ~/.sh_local ]] && . ~/.sh_local || true
